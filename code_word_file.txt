Movie Recommendation System

Recommender System is a system that seeks to predict or filter preferences according to the user's choices. Recommender system are utilized in variety of areas including movies,music,news,books,research articles, search queries, social tags, and products in general.Recommender system produce a list of recommendations is any of the two ways-
collaborative filtering: Collaborative filtering approaches build a model from the user's past behivior(i.e. items purchased or searched by the user)as well as similar decision made by the other users. This model is then used to predict items(or ratings for items) that users may have an interest in.
Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties content-based filtering methods are totally based on a description of the item and a profile of the user's preferences. It recommends items based on the user's past preference. Let's develop a basic recommendation system using python and Pandas.
Let's deveop a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user's movie choice.

import pandas as pd

import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

Get Feature Selection

df_features=df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

x = df_features['Movie_Genre']+ ''+ df_features['Movie_Keywords']+''+df_features['Movie_Tagline']+''+ df_features['Movie_Cast']+''+ df_features['Movie_Director']

x

x.shape

Get Feature Text Conversion to Tokens

from sklearn.feature_extraction.text  import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

Get Similarity Score using Cosine Similarity

cosine_similarity computers the L2 normalized dot product of vectors. Euclidean(L2)normalization projects is the vectors onto the unit sphere. and their dot product is then the cosine of the angle between the points denoted by the vectors.

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

Get Movie Name as Input from User and Validate for Closest Spelling

Favourite_Movie_Name = input('Enter your favourite movie name:')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

#getting a list of similar movies
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

Get All Movie Sort on Recommendation Score wrt Favourite Movie

# sorting the movies based on their similarity score
Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

#print the name of similar movies based on the index
print('tops 30 movies suggested for you: \n')

i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i+=1

Top 10 Movies Recommendation system


Movie_Name = input('enter your favourite movie name: ')
list_of_all_titles = df['Movie_Title'].tolist()
Find_Close_Match = difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match = Find_Close_Match[0]
Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))
sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print('Top 10 movies suggested for you: \n')


i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if (i<11):
    print(i,'.',title_from_index)
    i+=1

